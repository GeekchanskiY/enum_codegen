package main

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"go/types"
	"html/template"
	"os"
	"path/filepath"
	"slices"
	"strconv"
	"strings"
)

const Template = `// Code generated by go generate; DO NOT EDIT.
package {{ .PackageName }}

var {{ .EnumName }}Values = map[{{ .EnumName }}]string{
	{{ range .Enums }}
		{{ .Name }}: "{{ .Name }}",
	{{ end }}
}

`

func main() {
	// Default generate call env's
	// fmt.Println(os.Getenv("GOARCH"))
	// fmt.Println(os.Getenv("GOFILE"))
	// fmt.Println(os.Getenv("GOOS"))
	// fmt.Println(os.Getenv("GOLINE"))
	// fmt.Println(os.Getenv("GOPACKAGE"))

	targetLine, err := strconv.Atoi(os.Getenv("GOLINE"))
	if err != nil {
		panic(err)
	}

	path, err := os.Getwd()
	if err != nil {
		panic(err)
	}

	fullPath := filepath.Join(path, os.Getenv("GOFILE"))

	fset := token.NewFileSet()

	data, err := parser.ParseFile(fset, fullPath, nil, 0)
	if err != nil {
		panic(err)
	}

	var enumName string

	ast.Inspect(data, func(n ast.Node) bool {
		switch x := n.(type) {
		case *ast.TypeSpec:
			start := fset.Position(n.Pos())

			// GOLINE is 1 line upper than n.Pos()
			if start.Line == targetLine+1 {
				fmt.Println("target found!", x.Name)
				enumName = x.Name.Name

				return false
			}
		}

		return true
	})

	if enumName == "" {
		panic("target not found")
	}

	// type parser
	conf := types.Config{}
	info := &types.Info{
		Defs: make(map[*ast.Ident]types.Object),
	}
	_, err = conf.Check(path, fset, []*ast.File{data}, info)
	if err != nil {
		panic(err)
	}

	neededDeclarations := make([]string, 0)

	// search for declared names of the type
	for ident, obj := range info.Defs {
		if obj != nil {
			// obj.Type().Underlying() - get base type
			objPathSplit := strings.Split(obj.Type().String(), ".")

			// base objects have different structure, filter them
			// may try obj.Type().Underlying() == obj.Type(), like I'm smart
			if len(objPathSplit) != 2 {
				continue
			}

			if objPathSplit[1] == enumName {
				neededDeclarations = append(neededDeclarations, ident.Name)
			}

		}
	}

	if len(neededDeclarations) == 0 {
		panic("enum declaration not found")
	}

	type EnumData struct {
		Name  string
		Value int64
	}

	enums := make([]EnumData, 0, len(neededDeclarations))

	ast.Inspect(data, func(n ast.Node) bool {
		switch x := n.(type) {
		case *ast.GenDecl:
			for _, spec := range x.Specs {
				if ts, ok := spec.(*ast.ValueSpec); ok {

					// TODO: research problem below
					// const EnumValue5, EnumValue6 Enum = 5, 6 will not be parsed for some reason
					if len(ts.Names) != 1 {
						continue
					}

					declaration := ts.Names[0].Obj
					if declaration == nil {
						continue
					}

					if slices.Contains(neededDeclarations, declaration.Name) {
						enumValue, err := strconv.ParseInt(fmt.Sprint(declaration.Data), 10, 64)
						if err != nil {
							panic(err)
						}

						enums = append(enums, EnumData{
							Name:  declaration.Name,
							Value: enumValue,
						})
					}

					// fmt.Println("declaration", declaration)
					// fmt.Println(declaration.Kind)
					// fmt.Println(declaration.Name)
					// fmt.Println(declaration.Type)
					// fmt.Println(declaration.Data)
				}
			}
		}

		return true
	})

	for _, v := range enums {
		fmt.Printf("enum %s = %d\n", v.Name, v.Value)
	}

	tmpl, err := template.New("enum_code").Parse(Template)
	if err != nil {
		panic(err)
	}

	newFileName := strings.Split(os.Getenv("GOFILE"), ".")[0] + "_" + enumName + "__gen.go"

	dataPath := filepath.Join(path, newFileName)
	fmt.Printf("generated code to %s\n", dataPath)

	file, err := os.Create(dataPath)
	if err != nil {
		panic(err)
	}

	defer func() {
		if err := file.Close(); err != nil {
			panic(err)
		}
	}()

	err = tmpl.Execute(file, map[string]any{
		"PackageName": os.Getenv("GOPACKAGE"),
		"Enums":       enums,
		"EnumName":    enumName,
	})
	if err != nil {
		panic(err)
	}

}
